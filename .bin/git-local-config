#!/bin/bash

function ensurelocal {
	mkdir -p ~/.local;
}

function ensuregithubkey {
	GITHUB_KEY_ID="4AEE18F83AFDEB23"; # update this if it changes
	gpg -k "${GITHUB_KEY_ID}" &>/dev/null;
	
	if [[ $? -ne 0 ]]; then
		printf "\n";
		curl -s https://github.com/web-flow.gpg | gpg --import;
		printf "\n";
	fi

	# ensure it's fully trusted too
	echo -e "4\ny\n" | gpg --command-fd 0 --status-fd 3  --edit-key "${GITHUB_KEY_ID}" trust &>/dev/null
}

function local-config {
	until [[ -n  "${GITUSERNAME}" ]]; do
		default="$(git config --file "${CONFIGFILE}" --get user.name)";
		read -p "Your Name [${default}]: " GITUSERNAME
		GITUSERNAME=${GITUSERNAME:-$default}
	done

	until [[ -n  "${GITUSEREMAIL}" ]]; do
		default="$(git config --file "${CONFIGFILE}" --get user.email)";
		read -p "Your Email [${default}]: " GITUSEREMAIL
		GITUSEREMAIL=${GITUSEREMAIL:-$default}
	done

	ensurelocal;
	git config --file "${CONFIGFILE}" user.name "${GITUSERNAME}";
	git config --file "${CONFIGFILE}" user.email "${GITUSEREMAIL}";

	echo -e "\nUpdated ${CONFIGFILE}:";
	git config --file "${CONFIGFILE}" --get-regexp 'user.(name|email)';
}

function gpg-config {
	echo "Which method do you want to use for signing commits?"

	if [[ $# -ge 1 ]]; then
		METHOD="${1}";
		shift;
	else
		select METHOD in openpgp ssh codespace
		do
			break
		done
	fi

	ensuregithubkey
	case $METHOD in
		openpgp )
			echo "Pick a GPG key to use for openpgp git commit signatures:";

			select KEYID in $(gpg -K | grep -E -A2 '^sec.+expires:' | grep -v '^sec' | grep -v '\-\-' | xargs -L2 | tr -d '<>' | awk '{print $1 ":" $NF}' | tr '\n' ' ')
			do
				break
			done

			ensurelocal;
			git config --file "${CONFIGFILE}" user.signingKey "${KEYID/:*/}";
			git config --file "${CONFIGFILE}" commit.gpgSign true;
			git config --file "${CONFIGFILE}" tag.gpgSign true;
			git config --file "${CONFIGFILE}" gpg.format openpgp;

			echo -e "\nUpdated ${CONFIGFILE}:";
			git config --file "${CONFIGFILE}" --get-regexp 'user.signingkey|commit.gpgsign|tag.gpgsign|gpg.format';
			;;
		ssh )
			find ~/.ssh ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/PublicKeys -name '*.pub' 2>/dev/null | grep . &>/dev/null;
			if [[ $? -ne 0 ]]
			then
				echo "No SSH keys found!"
				exit
			fi

			echo "Pick an SSH key to use for ssh git commit signatures:";

			select PUBKEY in $(find ~/.ssh ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/PublicKeys -name '*.pub' 2>/dev/null | while read line; do echo "$line:$(awk '{print $NF}' $line)" ; done)
			do
				break
			done

			PUBKEY=${PUBKEY/:*/}
			PUBKEY_CONTENTS="$(cat "${PUBKEY}" | awk '{print $1 FS $2}')";

			TMPFILE="$(mktemp)";
			echo "* ${PUBKEY_CONTENTS}" > ${TMPFILE};

			if [[ -f ~/.ssh/allowed_signers ]]
			then
				cat ~/.ssh/allowed_signers >> ${TMPFILE};
			fi

			cat "${TMPFILE}" | sort -u > ~/.ssh/allowed_signers

			ensurelocal;
			git config --file "${CONFIGFILE}" user.signingKey "${PUBKEY}"; # "${PUBKEY_CONTENTS}";
			git config --file "${CONFIGFILE}" commit.gpgSign true;
			git config --file "${CONFIGFILE}" tag.gpgSign true;
			git config --file "${CONFIGFILE}" gpg.format ssh;
			git config --file "${CONFIGFILE}" gpg.ssh.allowedSignersFile '~/.ssh/allowed_signers'

			echo -e "\nUpdated ${CONFIGFILE}:"
			git config --file "${CONFIGFILE}" --get-regexp 'user.signingkey|commit.gpgsign|tag.gpgsign|gpg.format|gpg.ssh.allowedsignersfile';

			echo -e "\nAlso updated ~/.ssh/allowed_signers";
			if [[ ${PUBKEY} =~ .*com.maxgoedjen.Secretive.SecretAgent.* && "${SSH_AUTH_SOCK}" != "${HOME}/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh" ]]
			then
				echo -e "\nIt looks like you're using Secretive for your key signing.  Be sure the agent is running and to set SSH_AUTH_SOCK=\${HOME}/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh"
			fi
			;;
		codespace )
			echo "Using your codespace environment for git commit signing";

			ensurelocal;
			git config --file "${CONFIGFILE}" --unset user.signingKey;
			git config --file "${CONFIGFILE}" commit.gpgSign true;
			git config --file "${CONFIGFILE}" tag.gpgSign true;
			git config --file "${CONFIGFILE}" gpg.format openpgp;

			echo -e "\nUpdated ${CONFIGFILE}:";
			git config --file "${CONFIGFILE}" --get-regexp 'commit.gpgsign|tag.gpgsign|gpg.format';
			;;
		* )
			echo "Unknown method: $METHOD"
			exit 1;
			;;

	esac
}

function ssh-config {
	find ~/.ssh ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/PublicKeys -name '*.pub' 2>/dev/null | grep . &>/dev/null;
	if [[ $? -ne 0 ]]
	then
		echo "No SSH keys found!"
		exit
	fi

	echo "Pick a file to use for git-ssh identity:";

	select PUBKEY in $(find ~/.ssh ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/PublicKeys -name '*.pub' 2>/dev/null | while read line; do echo "$line:$(awk '{print $NF}' $line)" ; done)
	do
		break
	done

	ensurelocal;
	git config --file "${CONFIGFILE}" core.sshCommand "ssh -i ${PUBKEY/:*/}"

	echo -e "\nUpdated ${CONFIGFILE}:"
	git config --file "${CONFIGFILE}" --get-regexp 'core.sshcommand';
}

BASENAME="$(basename $0)";
GITCOMMAND="${BASENAME/git-/}";

type ${GITCOMMAND} &>/dev/null;
[[ $? -ne 0 ]] && echo "Unknown command: ${GITCOMMAND}" && exit 1;

if [[ $# -ge 1 ]]; then
	NAMESPACE="${1}";
	shift;
else
	read -p "Namespace [local]: " NAMESPACE
	NAMESPACE=${NAMESPACE:-local}
fi

if [[ "${NAMESPACE}" != "local" ]]; then
	PREFIX=".${NAMESPACE}";
	DIRPATTERN="**/${NAMESPACE}/**";
fi

CONFIGFILE="${HOME}/.local/${PREFIX}.gitconfig";
echo -e "Configuring ${CONFIGFILE}\n";

${GITCOMMAND} ${@};

if [[ -n "${DIRPATTERN}" ]]; then
	git config --file "${HOME}/.local/.gitconfig" "includeIf.gitdir:${DIRPATTERN}.path" "${CONFIGFILE}"
	echo -e "\nUpdated ${HOME}/.local/.gitconfig:";
	printf -v DIRPATTERN "%q" "${DIRPATTERN}";
	git config --file "${HOME}/.local/.gitconfig" --get-regexp "includeIf.gitdir:${DIRPATTERN}";
fi

